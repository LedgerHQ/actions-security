name: "[Ledger Security] Sign blobs"
description: "This action is used to sign blobs in keyless mode based on Github OIDC token."

inputs:
  path:
    description: 'Path to the artifact, directory, or glob pattern to match files for signing'
    required: true
    default: ""

runs:
  using: "composite"
  steps:
    - name: Check if repository is public (signature are leaking private information)
      shell: bash
      run: |
        if [[ "${{ github.event.repository.visibility }}" == "private" || "${{ github.event.repository.visibility }}" == "internal" ]]; then
          echo "This workflow only runs on public repositories. To avoid leaking private information, the workflow will be stopped."
          exit 0  # Stop the workflow, but without an error (successful exit)
        fi
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
    - name: Sign Blobs (python sheel)
      shell: python
      run: |
        import os
        import glob
        import subprocess
        import sys

        path = "${{ inputs.path }}"

        # Check if the provided path exists
        if not os.path.exists(path):
            print(f"Error: The specified path '{path}' does not exist.")
            sys.exit(1)

        # Function to sign a file
        def sign_file(file_path):
            print(f"Signing file: {file_path}")
            signature_file = f"{file_path}.sig"
            bundle_file = f"{file_path}.bundle"
            try:
                subprocess.run(["cosign", "sign-blob", "--yes", file_path, "--output-signature", signature_file, "--bundle", bundle_file], check=True)
            except subprocess.CalledProcessError as e:
                print(f"Error signing file {file_path}: {e}")
                sys.exit(1)

        # If the input is a directory, sign all files in the directory
        if os.path.isdir(path):
            for root, dirs, files in os.walk(path):
                for file in files:
                    full_path = os.path.join(root, file)
                    sign_file(full_path)

        # If the input is a file or a glob pattern, sign the matching files
        elif "*" in path or "?" in path:
            matching_files = glob.glob(path, recursive=True)
            if not matching_files:
                print(f"Error: No files found matching pattern '{path}'")
                sys.exit(1)
            for file in matching_files:
                if os.path.isfile(file):
                    sign_file(file)
                else:
                    print(f"Warning: Skipping non-file: {file}")

        # If it's a single file, sign that file
        elif os.path.isfile(path):
            sign_file(path)

        else:
            print(f"Error: '{path}' is neither a valid file nor a directory.")
            sys.exit(1)

    # TODO: Upload the signatures and bundle files to the artifact store
