name: "[Ledger Security] Sign blobs"
description: |
   The `sign-blob` GitHub Action enables secure, keyless signing of arbitrary data blobs using OIDC authentication based on GitHub's OIDC token. By eliminating the need to handle sensitive signing keys manually, this action allows developers to sign files, binaries, or other data artifacts securely within the CI/CD pipeline.
   
   This action is designed for seamless integration within Ledger's CI/CD workflow, automating the signing process to enhance the security and integrity of your software artifacts. By providing a secure and automated method for signing data, it helps ensure the authenticity and non-repudiation of artifacts distributed through the software supply chain.

inputs:
  path:
    description: 'Path to the artifact, directory, or glob pattern to match files for signing'
    required: true
    default: ""
  allow_private:
    description: 'If set to "true", will sign even if the repo is private'
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Check if repository is public (signature are leaking private information)
      if: ${{ github.event.repository.visibility != 'public' && inputs.allow_private != 'true' }}
      shell: bash
      run: echo "This action only runs on public repositories. To avoid leaking private information, the action will be stopped."
    - name: Install Cosign
      if: ${{ github.event.repository.visibility == 'public' || inputs.allow_private == 'true' }}
      uses: sigstore/cosign-installer@v3
    - name: Sign Blobs
      if: ${{ github.event.repository.visibility == 'public' || inputs.allow_private == 'true' }}
      shell: python
      run: |
        import os
        import glob
        import subprocess
        import sys

        path = "${{ inputs.path }}"

        # Check if the provided path exists
        if not os.path.exists(path):
            print(f"Error: The specified path '{path}' does not exist.")
            sys.exit(1)

        # Function to sign a file
        def sign_file(file_path):
            print(f"Signing file: {file_path}")
            signature_file = f"{file_path}.sig"
            bundle_file = f"{file_path}.bundle"
            try:
                subprocess.run(["cosign", "sign-blob", "--yes", file_path, "--output-signature", signature_file, "--bundle", bundle_file], check=True)
            except subprocess.CalledProcessError as e:
                print(f"Error signing file {file_path}: {e}")
                sys.exit(1)

        # If the input is a directory, sign all files in the directory
        if os.path.isdir(path):
            for root, dirs, files in os.walk(path):
                for file in files:
                    full_path = os.path.join(root, file)
                    sign_file(full_path)

        # If the input is a file or a glob pattern, sign the matching files
        elif "*" in path or "?" in path:
            matching_files = glob.glob(path, recursive=True)
            if not matching_files:
                print(f"Error: No files found matching pattern '{path}'")
                sys.exit(1)
            for file in matching_files:
                if os.path.isfile(file):
                    sign_file(file)
                else:
                    print(f"Warning: Skipping non-file: {file}")

        # If it's a single file, sign that file
        elif os.path.isfile(path):
            sign_file(path)

        else:
            print(f"Error: '{path}' is neither a valid file nor a directory.")
            sys.exit(1)

    # TODO: Upload the signatures and bundle files to the artifact store
